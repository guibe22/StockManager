@page "/R_Ventas"
@page "/R_Ventas/{VentaId:int}"
@inject ProductosBLL productosBLL
@inject ClientesBLL clientesBLL
@inject VentasBLL ventasBLL
@inject InventariosBLL inventariosBLL
@inject NotificationService notificationService

@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _environment;


<div class="d-flex justify-content-end ">
    <div class="zoom">
        <RadzenNumeric Placeholder="Buscar Venta..."  Style=" width: 250px;  height: 40px; font-size: 16px;" @bind-Value="VentaId" />
        <RadzenButton Icon="search"  Style=" width: 40px;  height: 39px; font-size: 16px;" Click="Buscar"/>
    </div>
</div>

<RadzenStack >  
<RadzenCard Class="rz-my-auto rz-mx-auto bordes " style=" background-image: linear-gradient(to right, #9d8f82 , rgb(195, 105, 36)  );"> 
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0" Class="rz-p-0 " >
                        <RadzenLabel Text="REGISTRO DE VENTAS" Style=" font-size: 25px; font-weight: bold; margin-bottom: 10px; color:white;" />
        </RadzenStack>
        <RadzenCard class=" rz-shadow-0 rz-border-radius-0 rz-p-8 " style="margin: 1rem calc(-1 * var(--rz-card-padding)); background-image: linear-gradient(173deg, #ce9051ac 0%, #fbfff1 100%);">
            <RadzenRow RowGap="5">
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Fecha:</RadzenText>
                    <RadzenDatePicker TValue="DateTime"   class=" zoom "  style="width: 190px;" @bind-Value="venta.Fecha"/>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow RowGap="5">
                <RadzenColumn SizeSM="6"> 
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Cliente:</RadzenText>
                    <RadzenDropDown TValue="int"  class="w-100 zoom " @ref=@radzenDropDown 
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@clientes TextProperty="Nombre" ValueProperty="ClienteId" AllowClear="true" SearchTextChanged="@(args => searchTextChanged(args))"
                        @bind-Value="@venta.ClienteId"
                    />
                </RadzenColumn>
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Tipo:</RadzenText>
                    <RadzenDropDown TValue="string" class="w-100 zoom" Data="@Tipos" AllowClear="true" @bind-Value="venta.Tipo"></RadzenDropDown>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow RowGap="1">
                 
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Producto:</RadzenText>
                    <RadzenDropDown TValue="int"  class="w-100 zoom " @ref=@radzenDropDown 
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@productos  ValueProperty="ProductoId" AllowClear="true"
                         SearchTextChanged="@(args => searchTextChanged(args))" @bind-Value="@detalleVenta.ProductoId">
                        <Template>
                            @{
                                if (context != null)
                                {
                                  
                                    int ProductoId=context.ProductoId;
                                  
                                    <div>@context.Nombre, Precio: @context.Precio, Cantidad: @inventarios.FirstOrDefault(x => x.ProductoId == ProductoId).Cantidad.ToString("N2")</div>
                                }
                            }
                        </Template>
                        </RadzenDropDown>
                </RadzenColumn>
              
                <RadzenColumn SizeSM="6" >
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" >Cantidad:</RadzenText>
                     <div class="input-group zoom">
                    <RadzenNumeric @bind-Value="detalleVenta.Cantidad" Style=" width: 185px;" />
                    <RadzenButton Icon="add"  Style=" width: 30px;  height: 30px; font-size: 16px; zoom;" Click="Agregar" />
                    </div>
                </RadzenColumn>
             
            </RadzenRow>

            <RadzenRow RowGap="5">
              <table class="table">
                <thead>
                     <tr>
                           <th>Producto</th>
                           <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Subtotal</th>
                            <th></th>
                     </tr>
                </thead>
                 <tbody>
                    @foreach (var detalleVenta in venta.detallesVentas)
                    { 
                    <tr>
                        <td>@productosBLL.Buscar(detalleVenta.ProductoId)?.Nombre</td> 
                        <td>@detalleVenta.Cantidad</td>
                        <td>$@detalleVenta.Precio.ToString("N2")</td>
                        <td>$@detalleVenta.SubTotal.ToString("N2")</td>
                        <td> <button name="Btn" id="Btn" class="btn btn-danger mr-2" type="button"
                                 @onclick=@(() =>  EliminarDetalle(detalleVenta))> 
                                    <span class="oi oi-trash"></span>
                            </button>
                        </td>
                         </tr>
                    }
                 </tbody>
                    
              </table>
            </RadzenRow>
             <RadzenRow RowGap="5">
               <RadzenLabel Style="font-size: 20px; font-weight: bold; margin-bottom: 10px;">
                    Total: @(venta.Total.ToString("N2"))$
                </RadzenLabel>
             </RadzenRow>


        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0" >
            <ButtonTemplate ColorParameter="#007bff" TextParameter="NUEVO" IconParameter="add"  OnClickHandler="Nuevo"  />
            <ButtonTemplate ColorParameter="#28a745" TextParameter="GUARDAR" IconParameter="save"  OnClickHandler="Guardar"  />
            <ButtonTemplate ColorParameter="#dc3545" TextParameter="ELIMINAR" IconParameter="delete"  OnClickHandler="Eliminar" />
        </RadzenStack>
    </RadzenCard>
</RadzenStack>


   @code {
    [Parameter]
    public int VentaId { get; set; }
    public Ventas venta { get; set; } = new Ventas();
    public DetallesVenta detalleVenta { get; set; } = new DetallesVenta();
    List<Clientes> clientes = new List<Clientes>();
    List<Productos> productos = new List<Productos>();
    List<Inventarios> inventarios = new List<Inventarios>();
    List<string> Tipos = new List<string>(){"Contado","Credito",};
    string? searchTextStatus;
    RadzenDropDown<int>? radzenDropDown;
    PdfGenerator pdfGenerator = new PdfGenerator();

    protected override void OnInitialized()
    {   
        inventarios = inventariosBLL.GetList(i => i.Cantidad > 0);
        var inventarioIds = inventarios.Select(i => i.ProductoId).ToList();
        productos = productosBLL.GetList(p => inventarioIds.Contains(p.ProductoId));

        clientes = clientesBLL.GetList(c => true);
        if (VentaId > 0)
        {
            Buscar();
        }
        else
        {
            venta.Fecha = DateTime.Today;
        }
    }

    void Guardar()
    {
        if (!Validar())
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de validación",
                Detail = "Por favor, asegúrate de seleccionar un cliente y un tipo de venta válidos."
            });

            return;
        }

        if (ventasBLL.Guardar(venta))
        {
            string nombreArchivo = "venta" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".pdf";
            string carpetaLogFacturas = Path.Combine(_environment.ContentRootPath, "LogFacturas");
            string rutaArchivo = Path.Combine(carpetaLogFacturas, nombreArchivo);
            
            if (!Directory.Exists(carpetaLogFacturas))
            {
                Directory.CreateDirectory(carpetaLogFacturas);
            }
            
            pdfGenerator.GeneratePdf(venta, rutaArchivo);
            Nuevo();

            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al guardar",
                Detail = "No se pudo guardar la venta. Por favor, intenta nuevamente."
            });
        }
    }

    bool Validar()
    {
        bool validacion = true;
        if (venta.ClienteId <= 0)
        {
            validacion = false;
        }
        if (String.IsNullOrEmpty(venta.Tipo))
        {
            validacion = false;
        }

        return validacion;
    }

    void Nuevo()
    {
        venta = new Ventas();
        detalleVenta = new DetallesVenta();
        venta.Fecha = DateTime.Today;
        VentaId = 0;
        inventarios = inventariosBLL.GetList(i => i.Cantidad > 0);
        var inventarioIds = inventarios.Select(i => i.ProductoId).ToList();
        productos = productosBLL.GetList(p => inventarioIds.Contains(p.ProductoId));
    }

    void Eliminar()
    {
        if (ventasBLL.Existe(venta.VentaId))
        {
            ventasBLL.Eliminar(venta);
            Nuevo();
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de existencia",
                Detail = "La venta seleccionada no existe."
            });
        }
    }

    void Buscar()
    {
        var encontrado = ventasBLL.Buscar(VentaId);
        if (encontrado != null)
        {
            venta = encontrado;
        }
    }

    void Agregar()
    {
        if (detalleVenta.ProductoId == 0)
        {
            return;
        }
        if (detalleVenta.Cantidad <= 0)
        {
            return;
        }
        if (inventarios?.FirstOrDefault(o => o.ProductoId == detalleVenta.ProductoId)?.Cantidad < detalleVenta.Cantidad)
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de inventario",
                Detail = "No hay suficiente inventario para agregar la cantidad especificada."
            });

            return;
        }

        var producto = productosBLL.Buscar(detalleVenta.ProductoId);
        if (producto != null)
        {
            detalleVenta.Precio = producto.Precio;
            detalleVenta.SubTotal = detalleVenta.Cantidad * detalleVenta.Precio;
        }
        inventarios.FirstOrDefault(o => o.ProductoId == detalleVenta.ProductoId).Cantidad -= detalleVenta.Cantidad;

        venta.Total += detalleVenta.SubTotal;
        venta.detallesVentas.Add(detalleVenta);
        detalleVenta = new DetallesVenta();
        StateHasChanged();
    }

   void EliminarDetalle(DetallesVenta detalle)
{
    inventarios.FirstOrDefault(o => o.ProductoId == detalle.ProductoId).Cantidad += detalle.Cantidad;
    venta.detallesVentas.Remove(detalle);
    venta.Total -= detalle.SubTotal;
    StateHasChanged();

    ShowNotification(new NotificationMessage
    {
        Severity = NotificationSeverity.Success,
        Summary = "Detalle eliminado",
        Detail = "El detalle se eliminó correctamente."
    });
}

    void searchTextChanged(string text)
    {
        searchTextStatus = $"Search text: {text}";
        StateHasChanged();
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
