@page "/R_Inventarios"
@page "/R_Inventarios/{InventarioId:int}"
@inject InventariosBLL InventariosBLL
@inject UbicacionesBLL ubicacionesBLL
@inject ProductosBLL productosBLL
@inject ProveedoresBLL proveedoresBLL
@inject NotificationService notificationService

    @*<EditForm Model="inventario" OnValidSubmit="Guardar"></EditForm>*@

<div class="d-flex justify-content-end ">
    <div class="zoom d-flex">
      <RadzenDropDown TValue="int" class="w-100 zoom "  @ref=@radzenDropDown 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
            Data=@inventarios TextProperty="Concepto" ValueProperty="InventarioId" AllowClear="true" SearchTextChanged="@(args => searchTextChanged(args))"
            @bind-value="InventarioId"
                    />
        <RadzenButton Icon="search"  Style=" width: 40px;  height: 39px; font-size: 16px;" Click="Buscar" />
    </div>
</div>


<RadzenStack >  
<RadzenCard Class="rz-my-auto rz-mx-auto bordes " style=" background-image: linear-gradient(to right, #9d8f82 , rgb(195, 105, 36)  );"> 
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0" Class="rz-p-0 " > 
       <RadzenLabel Text="REGISTRO DE INVENTARIOS" Style=" font-size: 25px; font-weight: bold; margin-bottom: 10px; color:white;" />
        </RadzenStack>
        <RadzenCard class=" rz-shadow-0 rz-border-radius-0 rz-p-8 " style="margin: 1rem calc(-1 * var(--rz-card-padding)); background-image: linear-gradient(173deg, #ce9051ac 0%, #fbfff1 100%);">
            <RadzenRow RowGap="7">
               
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Producto:</RadzenText>
                    <RadzenDropDown TValue="int" class="w-100 zoom "  @ref=@radzenDropDown 
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@productos TextProperty="Nombre" ValueProperty="ProductoId" AllowClear="true" SearchTextChanged="@(args => searchTextChanged(args))"
                        @bind-Value="@inventario.ProductoId"
                    />
                </RadzenColumn>

                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Razón:</RadzenText>
                    <RadzenDropDown TValue="string" class="w-100 zoom" Data="@razonesInventario" AllowClear="true" @bind-Value="@inventario.Concepto"></RadzenDropDown>
                </RadzenColumn>

            </RadzenRow>
            <RadzenRow RowGap="7">


            </RadzenRow>
            <RadzenRow RowGap="5">
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Fecha Ingreso:</RadzenText>
                    <RadzenDatePicker TValue="DateTime" class="w-100 zoom "  Format="dd/MM/yyyy" @bind-Value="inventario.Fecha"/>
                </RadzenColumn>
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Ubicacion:</RadzenText>
                    <RadzenDropDown TValue="int"  class="w-100 zoom " @ref=@radzenDropDown 
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data=@ubicaciones  AllowClear="true" SearchTextChanged="@(args => searchTextChanged(args))" ValueProperty="UbicacionId"
                       @bind-Value="@inventario.UbicacionId"
                    >
                     <Template>
                            @{
                                if (context != null)
                                {
                                    <div>Pasillo: @context.Pasillo, Estante: @context.Estante, Nivel: @context.Nivel</div>
                                }
                            }
                        </Template>
                    </RadzenDropDown>
                
                </RadzenColumn>
            </RadzenRow>

             <RadzenRow RowGap="5">
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn SizeSM="6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Cantidad:</RadzenText>
                    <RadzenNumeric class="w-100 zoom" @bind-Value="inventario.Cantidad"/>
                </RadzenColumn>
            </RadzenRow>


        </RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0">
            <ButtonTemplate ColorParameter="#007bff" TextParameter="NUEVO" IconParameter="add" OnClickHandler="Nuevo"  />
            <ButtonTemplate ColorParameter="#28a745" TextParameter="GUARDAR" IconParameter="save" OnClickHandler="Guardar"  />
            <ButtonTemplate ColorParameter="#dc3545" TextParameter="ELIMINAR" IconParameter="delete" OnClickHandler="Eliminar" />
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    [Parameter]
    public int InventarioId { get; set; }
    public int prueba { get; set; } = 7;

    List<string> razonesInventario = new List<string>()
    {
        "Compra de nuevos productos",
        "Venta de productos",
        "Transferencia de productos entre ubicaciones",
        "Actualización de inventario físico",
    };

    public Inventarios inventario { get; set; } = new Inventarios();
    List<Productos> productos = new List<Productos>();
    List<Ubicaciones> ubicaciones = new List<Ubicaciones>();
    List<Proveedores> proveedores = new List<Proveedores>();
    List<Inventarios> inventarios = new List<Inventarios>();
    string? searchTextStatus;
    RadzenDropDown<int>? radzenDropDown;

    protected override void OnInitialized()
    {
        productos = productosBLL.GetList(o => o.Eliminado == false);
        ubicaciones = ubicacionesBLL.GetList(o => o.Eliminado == false && o.Ocupado == false);
        proveedores = proveedoresBLL.GetList(o => o.Eliminado == false);
        inventarios = InventariosBLL.GetList(o => o.Eliminado == false);
        if (InventarioId > 0)
        {
            Buscar();
        }
        else
        {
            inventario.Fecha = DateTime.Now;
        }
    }

    void searchTextChanged(string text)
    {
        searchTextStatus = $"Search text: {text}";
        StateHasChanged();
    }

    void Guardar()
    {
        if (!Validar())
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de validación",
                Detail = "Por favor, asegúrate de seleccionar un producto y una ubicación válidos."
            });

            return;
        }

        if (InventariosBLL.Guardar(inventario))
        {
            Nuevo();
            inventarios = InventariosBLL.GetList(o => o.Eliminado == false);

            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al guardar",
                Detail = "No se pudo guardar el inventario. Por favor, intenta nuevamente."
            });
        }
    }

    void Nuevo()
    {
        inventario = new Inventarios();
        StateHasChanged();
    }

    void Eliminar()
    {
        if (InventariosBLL.Existe(inventario.InventarioId))
        {
            if (InventariosBLL.Eliminar(inventario))
            {
                Nuevo();

                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminado correctamente"
                });
            }
            else
            {
                ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error al eliminar",
                    Detail = "No se pudo eliminar el inventario. Por favor, intenta nuevamente."
                });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de existencia",
                Detail = "El inventario seleccionado no existe."
            });
        }
    }

    bool Validar()
    {
        bool esValido = true;

        if (inventario.ProductoId == 0)
        {
            esValido = false;
        }
        if (inventario.UbicacionId == 0)
        {
            esValido = false;
        }

        return esValido;
    }

    void Buscar()
    {
        var inventarioFound = InventariosBLL.Buscar(this.InventarioId);
        if (inventarioFound != null)
        {
            inventario = inventarioFound;
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error de búsqueda",
                Detail = "El inventario no se encontró."
            });
        }

        Console.WriteLine(inventario.ProductoId);
        Console.WriteLine(inventario.UbicacionId);
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
